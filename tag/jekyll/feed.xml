<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: jekyll | thecave | A Hideout for Programmers, Indie Devs, Solopreneurs]]></title>
  <link href="http://www.thecave.com/tag/jekyll/feed.xml" rel="self"/>
  <link href="http://www.thecave.com/"/>
  <updated>2017-04-12T14:13:53-04:00</updated>
  <id>http://www.thecave.com/</id>
  <author>
    <name><![CDATA[Kirby Turner]]></name>
    
  </author>

  
  <entry>
    
    <title type="html"><![CDATA[Tags And Categories]]></title>
    
    <link href="http://www.thecave.com/2015/09/21/tags-and-categories/"/>
    <updated>2015-09-21T19:45:44-04:00</updated>
    <id>http://www.thecave.com/2015/09/21/tags-and-categories</id>
    <tag>jekyll</tag>
    <description><![CDATA[<p>I’ve been doing a bit of tinkering here at thecave. I realized I was using categories as if they were tags and for one simple reason. I didn’t have a way to support tags. That is, until now.</p>

]]></description>
    <content type="html"><![CDATA[<p>I’ve been doing a bit of tinkering here at thecave. I realized I was using categories as if they were tags and for one simple reason. I didn’t have a way to support tags. That is, until now.</p>

<p>Tag support is provided in Jekyll, but I wanted something slightly different. I want the list of tags to appear at the end of a post just like the categories have for last couple of years. I searched for different ways to support tags with Jekyll, but I didn’t find anything suiting my needs. Then it occurred to me I could tweak the category plugins I use to work with tags, so that’s exactly what I did.</p>

<p>The <a href="https://github.com/recurser/jekyll-plugins">Jekyll category plugins</a> I use come from Dave Perretter. I made copies of <em>category_generator.rb</em> and <em>category_list_tags.rb</em> naming the new plugins <em>tag_generator.rb</em> and <em>tag_list_tags.rb</em>. Then I replace references to <code class="highlighter-rouge">categories</code> and <code class="highlighter-rouge">category</code> with <code class="highlighter-rouge">tags</code> and <code class="highlighter-rouge">tag</code> in the source code. And BAM! I now have tag support at thecave.com.</p>

<p>You can find the source code for the plugins in my site’s github <a href="https://github.com/kirbyt/site-www-thecave-com/tree/master/_plugins">repo</a>.</p>
]]></content>
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Redirect Jekyll Site To HTTPS On OpenShift]]></title>
    
    <link href="http://www.thecave.com/2015/07/14/redirect-jekyll-site-to-https-on-openshift/"/>
    <updated>2015-07-14T14:17:53-04:00</updated>
    <id>http://www.thecave.com/2015/07/14/redirect-jekyll-site-to-https-on-openshift</id>
    <tag>jekyll</tag>
    <description><![CDATA[<p>I’m preparing to roll out a new <a href="http://jekyllrb.com">Jekyll</a> website, but unlike with my other Jekyll sites, I want each web page served up on <code class="highlighter-rouge">https</code>, not <code class="highlighter-rouge">http</code>. This means telling the server to redirect <code class="highlighter-rouge">http</code> request to <code class="highlighter-rouge">https</code>.</p>

]]></description>
    <content type="html"><![CDATA[<p>I’m preparing to roll out a new <a href="http://jekyllrb.com">Jekyll</a> website, but unlike with my other Jekyll sites, I want each web page served up on <code class="highlighter-rouge">https</code>, not <code class="highlighter-rouge">http</code>. This means telling the server to redirect <code class="highlighter-rouge">http</code> request to <code class="highlighter-rouge">https</code>.</p>

<p>Hosting this new site on <a href="https://pages.github.com">Github Pages</a> isn’t option because Github Pages doesn’t support using a custom SSL certificate for your custom domain name. So I decided to see what it would take to host a Jekyll site on <a href="https://www.openshift.com">OpenShift</a>.</p>

<p>I was thrilled to learn that OpenShift has a <a href="https://hub.openshift.com/quickstarts/41-jekyll">quick start cartridge for installing Jekyll</a> on a new gear. With a click of a button I was able to deploy my new server instance with a boiler plate Jekyll site. I replaced the boiler plate site with the one I’ve been working on, and BAM! My site was up and running. The only step remaining was to force the web server to serve up the pages using <code class="highlighter-rouge">https</code>.</p>

<p>Turns out this is simple to do with OpenShift and Jekyll. First, I went over to namecheap.com and purchased a <a href="https://www.namecheap.com/security/ssl-certificates/rapidssl/rapidssl.aspx">RapidSSL certificate</a> with domain validation. Next, I followed the instructions from OpenShift to <a href="https://developers.openshift.com/en/managing-domains-ssl.html#_generating_a_csr_certificate_signing_request">generate my certificate signing request</a>. Using my newly generated CSR I activated my RapidSSL certificate over at namecheap, then I followed the instructions on OpenShift to <a href="https://developers.openshift.com/en/managing-domains-ssl.html#using-a-custom-ssl-certificate">add the certificate to my server instance</a>.</p>

<p>Up to this point everything was easy peasy, and all I had left to do was figure out how to redirect the Jekyll site from <code class="highlighter-rouge">http</code> to <code class="highlighter-rouge">https</code>. Turns out this isn’t difficult either.</p>

<p>The Jekyll website is actually just a static website hosted by Apache 2 running on an OpenShift gear. To force the redirect all I needed to do was add a <em>.htaccess</em> file to the root of my Jekyll site source code (note: the site source code is in the <em>source/</em> directory when using OpenShift) and put this rewrite rule in the file:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>RewriteEngine on  
RewriteCond %{HTTP:X-Forwarded-Proto} !https  
RewriteRule .* https://%{HTTP_HOST}%{REQUEST_URI} [R,L]  
</code></pre>
</div>

<p>After I added the <em>.htaccess</em> file with the rewrite rule, I pushed my changes to the remote git repository running on my OpenShift gear. This launched Jekyll which re-built my static website, this time with each web page being served with <code class="highlighter-rouge">https</code> instead of <code class="highlighter-rouge">http</code>.</p>

<p>Including the <em>.htaccess</em> file works great when deploying the Jekyll site to OpenShift, but approach isn’t unique to OpenShift. This should work for most Jekyll site hosted with Apache 2. And if for some reason Jekyll isn’t including the <em>.htaccess</em> file when it builds the site, add <code class="highlighter-rouge">include: [".htaccess"]</code> to your <em>_config.yaml</em> file.</p>

]]></content>
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Made Some Fixes To The Blog Site]]></title>
    
    <link href="http://www.thecave.com/2014/12/28/made-some-fixes-to-the-blog-site/"/>
    <updated>2014-12-28T19:01:32-05:00</updated>
    <id>http://www.thecave.com/2014/12/28/made-some-fixes-to-the-blog-site</id>
    <tag>jekyll</tag>
    <description><![CDATA[<p>Before doing some work today I decided to make some improvements to my blog site. I thought I would be playing with the site for only an hour or so, but instead it took most of the day. Typical when dealing with programming issues in an unfamiliar environment.</p>

]]></description>
    <content type="html"><![CDATA[<p>Before doing some work today I decided to make some improvements to my blog site. I thought I would be playing with the site for only an hour or so, but instead it took most of the day. Typical when dealing with programming issues in an unfamiliar environment.</p>

<p>This site, as well as <a href="http://blog.whitepeaksoftware.com">my company blog site</a>, uses <a href="http://jekyllrb.com">Jekyll</a> to generate a static HTML version of the site that is in turned hosted on a server for your viewing pleasure. I noticed a while back that categories with embedded spaces, such as <em>cross post</em>, weren’t accessible from the categories list. The embedded space was being replaced with a dash. Also, the RSS feed was not including the time of the post, only the date. So I set out to fix these problems.</p>

<p>I started with the time problem first. I learned that Jekyll does not include the time of the post unless you include the <code class="highlighter-rouge">date</code> parameter in the front matter. Adding the parameter is easy enough to do, but I decided I wanted to make it even easier for me. So I created a Rakefile that has a <code class="highlighter-rouge">new_post</code> task. I could have used an existing Rakefile, maybe even the one from Octopress, but I decided it would be more fun to write my own. Turns out writing a Rakefile is pretty simple, and I had my <code class="highlighter-rouge">new_post</code> task working quickly.</p>

<p>The <code class="highlighter-rouge">new_post</code> task I wrote create a new markdown file for the post. The task also generates the YAML front matter for the post including the <code class="highlighter-rouge">date</code> parameter with the current local time. This solves my time problem in the RSS feed for new post. I thought about making a fix for older post, but I decided it wasn’t worth the effort.</p>

<p>Using the Rakefile to create a new post makes so much sense that I decided to add a <code class="highlighter-rouge">deploy</code> task the Rakefile. I’ve been using a shell script I wrote a few years ago to generate the Jekyll site then commit it to the <em>gh-pages</em> branch of the site’s git <a href="https://github.com/kirbyt/site-www-thecave-com">repo</a>. I thought it would be a fun exercise to re-implement this in the Rakefile. At the same time I decided to change how the files are committed to the branch. Instead of working from a single local git repo, I decided to clone the repo to a second <em>_deploy</em> directory, then copy the <em>_site</em> files to that directory. Turns out this was fairly simple to do as well.</p>

<p>With that work out of the way I turned my focus to the categories name problem. Turns out it was caused by a space replacement in the Jekyll plugin I use to generate the categories list. That was the easiest, fastest fix of the day.</p>

<p>With a smile on my face and feeling of success I decided to do one more thing. I decided to update my install of Jekyll. And this is when everything fell apart. The sense of success and feeling of being productive evaporated quickly. Long story short, turns out I had rvm and rbenv installed at the same time, and apparently having both installed at the same time causes problems when updating gems. Unfortunately it took me a long while to figure out what had happened. I didn’t realize rvm was installed, but once I did I uninstalled it. I did another update and made sure I had rbenv-gem-rehash installed.</p>

<p>All is well now. In fact, the only reason I’m writing this post is to make sure everything is working as expected. And now that I have a faster way to create new posts, I’m hoping to post here more frequently.</p>

]]></content>
  </entry>
  
</feed>