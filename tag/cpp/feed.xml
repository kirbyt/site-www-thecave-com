<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: c++ | thecave | Kirby Turner's Blog]]></title>
  <link href="http://www.thecave.com/tag/cpp/feed.xml" rel="self"/>
  <link href="http://www.thecave.com/"/>
  <updated>2018-12-07T15:27:16+00:00</updated>
  <id>http://www.thecave.com/</id>
  <author>
    <name><![CDATA[Kirby Turner]]></name>
    
  </author>

  
  <entry>
    
    <title type="html"><![CDATA[Interview with Bjarne Stroustrup]]></title>
    
    <link href="http://www.thecave.com/2006/11/29/interview-with-bjarne-stroustrup/"/>
    <updated>2006-11-29T00:00:00+00:00</updated>
    <id>http://www.thecave.com/2006/11/29/interview-with-bjarne-stroustrup</id>
    <tag>c++</tag>
    <description><![CDATA[<p>TechnologyReview.com has a very good <a href="http://www.technologyreview.com/InfoTech/17831/page1/">interview with Bjarne Stroustrup</a>, the creator of C++.  In the interview Bjarne talks about what is wrong with software development.  One quote that really stuck a cord with me is:<br /><br />&lt;div class="quote"&gt;<br />“Looking at “average” pieces of code can make me cry. The structure is appalling, and the programmers clearly didn’t think deeply about correctness, algorithms, data structures, or maintainability. Most people don’t actually read code; they just see Internet Explorer or Windows “freeze,” have their cell phone drop a call, read the latest newspaper story about viruses, and they shudder.”<br />&lt;/div&gt;<br /><br />So true, so true.  <br /><br />Many programmers today are only worried about getting a feature out the door as quickly as possible ignoring the fundamentals of software development.  This is typically driven by demands from management.  I for one have been guilty of taking shortcuts just to meet unrealistic demands.  This is one of the reasons I left the corporate IT world.  I was losing pride in my work and I felt I was starting to forget the fundamentals of software development.<br /><br />Bjarne also says (towards the end of the interview):<br /><br />&lt;div class="quote"&gt;<br />“A lot of thinking about software development is focused on the group, the team, the company. This is often done to the point where the individual is completely submerged in corporate “culture” with no outlet for unique talents and skills. Corporate practices can be directly hostile to individuals with exceptional skills and initiative in technical matters. I consider such management of technical people cruel and wasteful.”<br />&lt;/div&gt;<br /><br />I am by no means the best programmer nor do I consider myself an expert, but this is something I have definitely experienced first hand on more than one occasion and with more than one employer.  In a way it was good for me (I worked with good companies) because I got to do a lot of R&amp;D; work inventing new things, which was a lot of fun, that never went into production but aided in completing production systems.  I have been called everything from a maverick to a hero to a lose cannon.  And all because I insisted on being myself, an individual with a passion for software development.  It wasn’t that I was against the team or company.  I just wanted our software to be the best it could be.  I wanted time to think about proper algorithms and data structures, and most importantly maintainability.  I knew as I do today that the right amount of up front time can have huge payoffs in the long run.  Unfortunately too many in the software industry think only of the next 6 months and not of the next 6 years.</p>
]]></description>
    <content type="html"><![CDATA[<p>TechnologyReview.com has a very good <a href="http://www.technologyreview.com/InfoTech/17831/page1/">interview with Bjarne Stroustrup</a>, the creator of C++.  In the interview Bjarne talks about what is wrong with software development.  One quote that really stuck a cord with me is:<br /><br />&lt;div class="quote"&gt;<br />“Looking at “average” pieces of code can make me cry. The structure is appalling, and the programmers clearly didn’t think deeply about correctness, algorithms, data structures, or maintainability. Most people don’t actually read code; they just see Internet Explorer or Windows “freeze,” have their cell phone drop a call, read the latest newspaper story about viruses, and they shudder.”<br />&lt;/div&gt;<br /><br />So true, so true.  <br /><br />Many programmers today are only worried about getting a feature out the door as quickly as possible ignoring the fundamentals of software development.  This is typically driven by demands from management.  I for one have been guilty of taking shortcuts just to meet unrealistic demands.  This is one of the reasons I left the corporate IT world.  I was losing pride in my work and I felt I was starting to forget the fundamentals of software development.<br /><br />Bjarne also says (towards the end of the interview):<br /><br />&lt;div class="quote"&gt;<br />“A lot of thinking about software development is focused on the group, the team, the company. This is often done to the point where the individual is completely submerged in corporate “culture” with no outlet for unique talents and skills. Corporate practices can be directly hostile to individuals with exceptional skills and initiative in technical matters. I consider such management of technical people cruel and wasteful.”<br />&lt;/div&gt;<br /><br />I am by no means the best programmer nor do I consider myself an expert, but this is something I have definitely experienced first hand on more than one occasion and with more than one employer.  In a way it was good for me (I worked with good companies) because I got to do a lot of R&amp;D; work inventing new things, which was a lot of fun, that never went into production but aided in completing production systems.  I have been called everything from a maverick to a hero to a lose cannon.  And all because I insisted on being myself, an individual with a passion for software development.  It wasn’t that I was against the team or company.  I just wanted our software to be the best it could be.  I wanted time to think about proper algorithms and data structures, and most importantly maintainability.  I knew as I do today that the right amount of up front time can have huge payoffs in the long run.  Unfortunately too many in the software industry think only of the next 6 months and not of the next 6 years.</p>
]]></content>
  </entry>
  
</feed>